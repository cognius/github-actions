{"version":3,"file":"example-ts/index.js","sources":["./src/example-ts/actions/run.ts","./src/example-ts/app/index.ts","./src/example-ts/index.ts","utils/actions/actions.ts","utils/actions/context.ts","utils/objects/merger.ts"],"sourcesContent":["import type { Runner } from \"@utils/actions\"\nimport type { Input } from \"../app/types\"\n\n// import { info } from \"@actions/core\"\n\nconst action: Runner<Input> = async (data) => {\n  // info(`hello ${data.input.name}`)\n}\n\nexport default action\n","import type { Input } from \"./types\"\n\nimport { Actions, DefaultContext, type InputBuilder } from \"@utils/actions\"\n\nexport const context = new DefaultContext(\"example-ts\", \"v0.1.0-dev\")\nexport const builder: InputBuilder<Input> = () => {\n  return {\n    name: \"example\",\n  }\n}\n\nexport default Actions.builder(builder, context)\n","import action from \"./actions/run\"\nimport app from \"./app\"\n\nvoid app.exec(action)\n","import type { BaseContext, InputBuilder, Runner } from \"./types\"\n\nimport { deepMerge } from \"@utils/objects\"\n\nclass Actions<Input extends object, Context extends BaseContext> {\n  static builder<Input extends object, Context extends BaseContext>(\n    builder: InputBuilder<Input, Context>,\n    context: Context\n  ) {\n    return new Actions(builder, context)\n  }\n\n  private constructor(\n    private readonly builder: InputBuilder<Input, Context>,\n    private readonly context: Context\n  ) {}\n\n  async exec(runner: Runner<Input, Context>, input?: Partial<Input>) {\n    const base = this.builder(this.context)\n    const data = {\n      input: deepMerge(base, input),\n    }\n\n    await runner(data, this.context)\n  }\n}\n\nexport { Actions }\n","// import type { getInput as GetInput } from \"@actions/core\"\n// import type { BaseConverter } from \"@utils/converters\"\nimport type { BaseContext } from \"./types\"\n\n// import { parseInputs } from \"@utils/inputs\"\n\ntype PrimitiveType = string | number | boolean\n\nexport class DefaultContext implements BaseContext {\n  constructor(\n    readonly name: string,\n    readonly version: string\n  ) {}\n\n  /**\n   * formatting string. The formatting should be 'hello {world}'\n   *\n   * @param format format message\n   * @param data message data\n   */\n  format(\n    format: string,\n    ...data: Array<Record<string, PrimitiveType> | PrimitiveType>\n  ): string {\n    let output = format\n    if (data.length > 0) {\n      const t = typeof data[0]\n\n      if (t === \"string\" || t === \"number\" || t === \"boolean\") {\n        const array = data as PrimitiveType[]\n        return array.reduce<string>((prev, current, index) => {\n          return prev.replace(\n            new RegExp(`\\\\{${index}\\\\}`, \"gi\"),\n            current.toString()\n          )\n        }, output)\n      } else {\n        const args = data[0] as Record<string, PrimitiveType>\n        for (const key in args) {\n          const value = args[key]\n          output = output.replace(\n            new RegExp(`\\\\{${key}\\\\}`, \"gi\"),\n            value.toString()\n          )\n        }\n      }\n    }\n\n    return output\n  }\n\n  // input<Output>(\n  //   getInput: typeof GetInput,\n  //   name: string,\n  //   converter: BaseConverter<string, Output>\n  // ) {\n  //   const data = getInput(name, { required: false, trimWhitespace: true })\n  //   return parseInputs(name, data, converter)\n  // }\n}\n","const deepMerge = <A extends object>(a: A, b?: Partial<A>): A => {\n  if (b === undefined || b === null || Object.keys(b).length <= 0)\n    return Object.assign({}, a) as A\n\n  const result: Record<string, unknown> = {}\n  const keys = new Set([...Object.keys(a), ...Object.keys(b)])\n  for (const key of keys) {\n    const aValue = (a as Record<string, unknown>)[key]\n    const bValue = (b as Record<string, unknown>)[key]\n    if (Array.isArray(aValue) && Array.isArray(bValue)) {\n      result[key] = [...aValue, ...bValue]\n    } else if (\n      typeof bValue === \"object\" &&\n      !Object.getOwnPropertyNames(Object.getPrototypeOf(bValue)).includes(\n        \"hasOwnProperty\"\n      )\n    ) {\n      result[key] = bValue\n    } else if (\n      typeof aValue === \"object\" &&\n      aValue !== null &&\n      typeof bValue === \"object\" &&\n      bValue !== null\n    ) {\n      result[key] = deepMerge(\n        aValue as Record<string, unknown>,\n        bValue as Record<string, unknown>\n      )\n    } else {\n      result[key] = structuredClone(bValue ?? aValue)\n    }\n  }\n\n  return result as A\n}\n\nexport { deepMerge }\n"],"names":["action","data","context","DefaultContext","Actions","name","builder","exec","runner","input","base","deepMerge","version","constructor","format","output","length","t","array","reduce","prev","current","index","replace","RegExp","toString","args","key","value","a","b","Object","keys","assign","result","Set","aValue","bValue","Array","isArray","getOwnPropertyNames","getPrototypeOf","includes","structuredClone"],"mappings":"iGAKA,IAAMA,EAAwB,MAAOC,IAErC,EAEA,MAAeD,C,+FCLR,IAAME,EAAU,IAAI,EAAAC,cAAc,CAAC,aAAc,cAOxD,MAAe,EAAAC,OAAA,QAAe,CANc,IACnC,EACLC,KAAM,SACR,GAGsCH,E,yDCRnC,A,SAAA,YAAQ,CAAC,SAAM,C,8FCCpB,OAAME,EASeE,OAAA,AACAJ,CAAAA,OAAA,AATnB,QAAOI,QACLA,CAAqC,CACrCJ,CAAgB,CAChB,CACA,OAAO,IAAIE,EAAQE,EAASJ,EAC9B,CAEA,YACmBI,CAAO,CACPJ,CAAO,CACxB,C,aAFiBI,E,aACAJ,CAChB,CAEH,MAAMK,KAAKC,CAA8B,CAAEC,CAAsB,CAAE,CACjE,IAAMC,EAAO,IAAI,CAACJ,OAAO,CAAC,IAAI,CAACJ,OAAO,EAChCD,EAAO,CACXQ,MAAO,KAAAE,SAAA,EAAUD,EAAMD,EACzB,CAEA,OAAMD,EAAOP,EAAM,IAAI,CAACC,OAAO,CACjC,CACF,C,sFCjBO,OAAMC,EAEAE,IAAA,AACAO,CAAAA,OAAA,AAFXC,aACWR,CAAI,CACJO,CAAO,CAChB,C,UAFSP,E,aACAO,CACR,CAQHE,OACEA,CAAc,CACd,GAAGb,CAA0D,CACrD,CACR,IAAIc,EAASD,EACb,GAAIb,EAAKe,MAAM,CAAG,EAAG,CACnB,IAAMC,EAAI,OAAOhB,CAAI,CAAC,EAAE,CAExB,GAAIgB,AAAM,WAANA,GAAkBA,AAAM,WAANA,GAAkBA,AAAM,YAANA,EAEtC,OAAOC,AADOjB,EACDkB,MAAM,CAAS,CAACC,EAAMC,EAASC,IACnCF,EAAKG,OAAO,CACjB,AAAIC,OAAO,CAAC,GAAG,EAAEF,EAAM,GAAG,CAAC,CAAE,MAC7BD,EAAQI,QAAQ,IAEjBV,EACE,EACL,IAAMW,EAAOzB,CAAI,CAAC,EAAE,CACpB,IAAK,IAAM0B,KAAOD,EAAM,CACtB,IAAME,EAAQF,CAAI,CAACC,EAAI,CACvBZ,EAASA,EAAOQ,OAAO,CACrB,AAAIC,OAAO,CAAC,GAAG,EAAEG,EAAI,GAAG,CAAC,CAAE,MAC3BC,EAAMH,QAAQ,GAElB,CACF,CACF,CAEA,OAAOV,CACT,CAUF,C,gWC3DA,IAAMJ,EAAY,CAAmBkB,EAAMC,KACzC,GAAIA,MAAAA,GAAiCC,OAAOC,IAAI,CAACF,GAAGd,MAAM,EAAI,EAC5D,OAAOe,OAAOE,MAAM,CAAC,CAAC,EAAGJ,GAE3B,IAAMK,EAAkC,CAAC,EACnCF,EAAO,IAAIG,IAAI,IAAIJ,OAAOC,IAAI,CAACH,MAAOE,OAAOC,IAAI,CAACF,GAAG,EAC3D,IAAK,IAAMH,KAAOK,EAAM,CACtB,IAAMI,EAAUP,CAA6B,CAACF,EAAI,CAC5CU,EAAUP,CAA6B,CAACH,EAAI,AAC9CW,CAAAA,MAAMC,OAAO,CAACH,IAAWE,MAAMC,OAAO,CAACF,GACzCH,CAAM,CAACP,EAAI,CAAG,IAAIS,KAAWC,EAAO,CAEpC,AAAkB,UAAlB,OAAOA,GACNN,OAAOS,mBAAmB,CAACT,OAAOU,cAAc,CAACJ,IAASK,QAAQ,CACjE,kBAKF,AAAkB,UAAlB,OAAON,GACPA,AAAW,OAAXA,GACA,AAAkB,UAAlB,OAAOC,GACPA,AAAW,OAAXA,EAEAH,CAAM,CAACP,EAAI,CAAGhB,EACZyB,EACAC,GAGFH,CAAM,CAACP,EAAI,CAAGgB,gBAAgBN,GAAUD,GAZxCF,CAAM,CAACP,EAAI,CAAGU,CAclB,CAEA,OAAOH,CACT,C"}